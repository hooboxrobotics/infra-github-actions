name: build and push container

on:
  workflow_call:
    inputs:
      run_ci:
        type: boolean
        default: true
        required: false
      run_cd:
        type: boolean
        default: true
        required: false
    secrets:
      CONTAINER_REGISTRY_USER:
        required: true
      CONTAINER_REGISTRY_PASS:
        required: true
      CONTAINER_REGISTRY_HOST:
        required: true
      APP_CREATE_INGRESS:
        required: true
      GIT_HELM_REPO:
        required: true
      GIT_HELM_SSK_KEY:
        required: true
      KUBERNETES_CONFIG:
        required: true
      APP_MYSQL_ENABLED:
        required: true
      APP_MINIO_ENABLED:
        required: false
      APP_MEMCACHED_ENABLED:
        required: false
      

jobs:
  pre_work:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.image_name.outputs.value }}
      image_tag: ${{ steps.image_tag.outputs.value }}
    steps:

    - name: set the container repository name
      id: image_name
      run: echo "::set-output name=value::$(echo ${{ github.repository }} | cut -d/ -f2)"

    - name: set the container repository name
      id: image_tag
      run: echo "::set-output name=value::$(echo $GITHUB_SHA | cut -c 1-6)"

  test_application:
    runs-on: ubuntu-latest
    if: inputs.run_ci
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - name: checkout this repo
        uses: actions/checkout@v3
        continue-on-error: true

      - name: setup node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
        continue-on-error: true

      - name: install dependencies
        run: npm ci
        continue-on-error: true

      - name: run the lint
        run: npm run lint
        continue-on-error: true

      - name: run the test
        run: npm run test
        continue-on-error: true

  container_build:
    runs-on: ubuntu-latest
    if: inputs.run_ci
    needs:
    - pre_work
    - test_application
    steps:
    - name: checkout this repo
      uses: actions/checkout@v3

    - name: setup qemu
      uses: docker/setup-qemu-action@v1

    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1

    - name: login on registry
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASS }}
        registry: ${{ secrets.CONTAINER_REGISTRY_HOST }}

    - name: build and push container
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY_HOST }}/${{ needs.pre_work.outputs.image_name }}:${{ needs.pre_work.outputs.image_tag }}

  deploy_application:
    runs-on: ubuntu-latest
    if: inputs.run_cd
    needs:
    - pre_work
    - container_build
    steps:
    - name: checkout this repo
      uses: actions/checkout@v3

    - name: set the deployment namespace
      id: namespace
      run: echo "::set-output name=value::$(echo ${{ github.repository }} | cut -d/ -f2 | cut -d\- -f1,2)"

    - name: set the deployment domain prefix
      id: domain_prefix
      run: echo "::set-output name=value::$(echo ${{ github.repository }} | cut -d/ -f2 | cut -d\- -f3)"

    - name: set the deployment domain
      id: domain
      run: |
        case "${{ github.repository }}" in
          */np-api*)        echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}-api.homol.np.hoobox.one" ;;
          */np-frontend*)   echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}.homol.np.hoobox.one" ;;
          */np-integrador*) echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}-hsl.homol.hoobox.one" ;;
          
          */npv1-api*)      echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}-api.homol.neonpass.com.br" ;;
          */npv1-frontend*) echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}.homol.neonpass.com.br" ;;
          
          */shared-api*)      echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}-api.homol.hoobox.one" ;;
          */shared-frontend*) echo "::set-output name=value::${{ steps.domain_prefix.outputs.value }}.homol.hoobox.one" ;;
        esac

    - name: checkout helm repo
      uses: actions/checkout@v3
      with:
        path: "helm_apps"
        ssh-key: ${{ secrets.GIT_HELM_SSK_KEY }}
        repository: ${{ secrets.GIT_HELM_REPO }}

    - name: deploy the application
      uses: WyriHaximus/github-action-helm3@v2
      with:
        kubeconfig: '${{ secrets.KUBERNETES_CONFIG }}'
        exec: |
          helm upgrade ${{ needs.pre_work.outputs.image_name }} \
            --create-namespace --namespace ${{ steps.namespace.outputs.value }} \
            --set-string ContainerRegistry=${{ secrets.CONTAINER_REGISTRY_HOST }} \
            --set CreateIngress=${{ secrets.APP_CREATE_INGRESS }} \
            --set-string AppDomain=${{ steps.domain.outputs.value }} \
            --set-string Version=${{ needs.pre_work.outputs.image_tag }} \
            --set global.MinioEnabled=${{ secrets.APP_MINIO_ENABLED }} \
            --set global.MySQLEnabled=${{ secrets.APP_MYSQL_ENABLED }} \
            --set global.MemcachedEnabled=${{ secrets.APP_MEMCACHED_ENABLED }} \
            --set-string global.GitRevParse=`cd helm_apps && git rev-parse --short HEAD` \
            --install helm_apps
